File configFile = file('pom.xml')
configFile = file(configFile.absolutePath)
configFile = file(new File('pom.xml'))

FileCollection collection = files('pom.xml', new File('build.sh'), ['build.xml', 'gradlew'])

collection.each { File file ->
    println file.name
}

Set set = collection.files
Set set2 = collection as Set
List list = collection as List

def union = collection + files('settings.gradle')
def different = collection - files('settings.gradle')

task list << {
    def collections = []
    rootDir.eachFileRecurse {
        collections += it
    }
    collections.collect { relativePath(it)}.sort().each{println it}
}


task copy(type: Copy) {
    from '.'
    from 'build'
    into 'target'
    include '*.xml'
    exclude { detail ->
        detail.file.name.endsWith('.iml')
    }
}
task copy2(type: Copy) {
    from '.'
    from 'build'
    into 'target'
    include '*staging*'
    rename '(.+)-staging-(.+)', '$1$2'
    expand(copyright: '2009', version: '2.3.1')
}





//group 'kr.ac.jejunu'
//version '1.0-SNAPSHOT'
//
//apply plugin: 'java'
//
//sourceCompatibility = 1.8
//
//ext.springVersion = '5.0.4.RELEASE'
//
//repositories {
//    mavenCentral()
//    jcenter()
//}
//
//dependencies {
//    compile 'mysql:mysql-connector-java:5.1.37'
//    compile "org.springframework:spring-context:${springVersion}"
//    compile "org.springframework:spring-beans:${springVersion}"
//    compile "org.springframework:spring-core:${springVersion}"
//    compile "org.springframework:spring-aop:${springVersion}"
//    compile "org.springframework:spring-expression:${springVersion}"
//    compile "org.springframework:spring-jdbc:${springVersion}"
//    compile "org.springframework:spring-tx:${springVersion}"
//    compileOnly 'org.projectlombok:lombok:1.16.20'
//    testCompile group: 'junit', name: 'junit', version: '4.11'
//}
